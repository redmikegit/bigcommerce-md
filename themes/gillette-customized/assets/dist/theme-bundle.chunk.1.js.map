{"version":3,"sources":["webpack:///./assets/js/theme/gift-certificate.js","webpack:///./assets/js/theme/common/utils/translations-utils.js","webpack:///./assets/js/theme/common/gift-certificate-validator.js"],"names":["GiftCertificate","context","validationDictionary","createTranslationDictionary","$certBalanceForm","$","purchaseModel","val","length","formModel","email","$purchaseForm","$customAmounts","find","purchaseValidator","nod","submit","delay","tap","announceInputErrorMessage","$element","min","data","minFormatted","max","maxFormatted","add","selector","validate","cb","numberVal","Number","errorMessage","message","amountRange","amountPlaceholders","updatedErrorText","forEach","placeholder","i","includes","replace","insertFormattedAmountsIntoErrorMessage","certificate_amount_range","toName","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","getPage","err","content","updateContent","previewError","wrap","$balanceForm","balanceValidator","checkIsGiftCertValid","this","invalid_gift_certificate","PageManager","isTranslationDictionaryNotEmpty","dictionary","Object","keys","activeDictionary","JSON","parse","chooseActiveDictionary","validationDictionaryJSON","validationFallbackDictionaryJSON","validationDefaultDictionaryJSON","localizations","values","map","key","split","pop","reduce","acc","cert"],"mappings":"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","file":"theme-bundle.chunk.1.js","sourcesContent":["import PageManager from './page-manager';\nimport nod from './common/nod';\nimport checkIsGiftCertValid from './common/gift-certificate-validator';\nimport formModel from './common/models/forms';\nimport { createTranslationDictionary } from './common/utils/translations-utils';\nimport { announceInputErrorMessage } from './common/utils/form-utils';\nimport { api } from '@bigcommerce/stencil-utils';\nimport { defaultModal } from './global/modal';\n\nexport default class GiftCertificate extends PageManager {\n    constructor(context) {\n        super(context);\n        this.validationDictionary = createTranslationDictionary(context);\n\n        const $certBalanceForm = $('#gift-certificate-balance');\n\n        const purchaseModel = {\n            recipientName(val) {\n                return val.length;\n            },\n            recipientEmail(...args) {\n                return formModel.email(...args);\n            },\n            senderName(val) {\n                return val.length;\n            },\n            senderEmail(...args) {\n                return formModel.email(...args);\n            },\n            customAmount(value, min, max) {\n                return value && value >= min && value <= max;\n            },\n            setAmount(value, options) {\n                let found = false;\n\n                options.forEach((option) => {\n                    if (option === value) {\n                        found = true;\n                        return false;\n                    }\n                });\n\n                return found;\n            },\n        };\n\n        const $purchaseForm = $('#gift-certificate-form');\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\n        const purchaseValidator = nod({\n            submit: '#gift-certificate-form input[type=\"submit\"]',\n            delay: 300,\n            tap: announceInputErrorMessage,\n        });\n\n        if ($customAmounts.length) {\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\n            const min = $element.data('min');\n            const minFormatted = $element.data('minFormatted');\n            const max = $element.data('max');\n            const maxFormatted = $element.data('maxFormatted');\n            const insertFormattedAmountsIntoErrorMessage = (message, ...amountRange) => {\n                const amountPlaceholders = ['[MIN]', '[MAX]'];\n                let updatedErrorText = message;\n                amountPlaceholders.forEach((placeholder, i) => {\n                    updatedErrorText = updatedErrorText.includes(placeholder) ?\n                        updatedErrorText.replace(placeholder, amountRange[i]) :\n                        updatedErrorText;\n                });\n                return updatedErrorText;\n            };\n\n            purchaseValidator.add({\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\n                validate: (cb, val) => {\n                    const numberVal = Number(val);\n\n                    if (!numberVal) {\n                        cb(false);\n                    }\n\n                    cb(numberVal >= min && numberVal <= max);\n                },\n                errorMessage: insertFormattedAmountsIntoErrorMessage(this.validationDictionary.certificate_amount_range, minFormatted, maxFormatted),\n            });\n        }\n\n        purchaseValidator.add([\n            {\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\n\n                    cb(typeof (val) === 'string');\n                },\n                errorMessage: this.context.certTheme,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n        ]);\n\n        if ($certBalanceForm.length) {\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\n\n            $certBalanceForm.on('submit', () => {\n                balanceVal.performCheck();\n\n                if (!balanceVal.areAll('valid')) {\n                    return false;\n                }\n            });\n        }\n\n        $purchaseForm.on('submit', event => {\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return event.preventDefault();\n            }\n        });\n\n        $('#gift-certificate-preview').click(event => {\n            event.preventDefault();\n\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return;\n            }\n\n            const modal = defaultModal();\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\n\n            modal.open();\n\n            api.getPage(previewUrl, {}, (err, content) => {\n                if (err) {\n                    return modal.updateContent(this.context.previewError);\n                }\n\n                modal.updateContent(content, { wrap: true });\n            });\n        });\n    }\n\n    checkCertBalanceValidator($balanceForm) {\n        const balanceValidator = nod({\n            submit: $balanceForm.find('input[type=\"submit\"]'),\n            tap: announceInputErrorMessage,\n        });\n\n        balanceValidator.add({\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\n            validate(cb, val) {\n                cb(checkIsGiftCertValid(val));\n            },\n            errorMessage: this.validationDictionary.invalid_gift_certificate,\n        });\n\n        return balanceValidator;\n    }\n}\n","const TRANSLATIONS = 'translations';\nconst isTranslationDictionaryNotEmpty = (dictionary) => !!Object.keys(dictionary[TRANSLATIONS]).length;\nconst chooseActiveDictionary = (...dictionaryJsonList) => {\n    for (let i = 0; i < dictionaryJsonList.length; i++) {\n        const dictionary = JSON.parse(dictionaryJsonList[i]);\n        if (isTranslationDictionaryNotEmpty(dictionary)) {\n            return dictionary;\n        }\n    }\n};\n\n/**\n * defines Translation Dictionary to use\n * @param context provides access to 3 validation JSONs from en.json:\n * validation_messages, validation_fallback_messages and default_messages\n * @returns {Object}\n */\nexport const createTranslationDictionary = (context) => {\n    const { validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON } = context;\n    const activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);\n    const localizations = Object.values(activeDictionary[TRANSLATIONS]);\n    const translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(key => key.split('.').pop());\n\n    return translationKeys.reduce((acc, key, i) => {\n        acc[key] = localizations[i];\n        return acc;\n    }, {});\n};\n","export default function (cert) {\n    if (typeof cert !== 'string' || cert.length === 0) {\n        return false;\n    }\n\n    // Add any custom gift certificate validation logic here\n    return true;\n}\n"],"sourceRoot":""}